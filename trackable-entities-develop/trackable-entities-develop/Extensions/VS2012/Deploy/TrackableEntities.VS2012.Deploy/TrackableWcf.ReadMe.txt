Trackable WCF ReadMe

This sample demonstrates how to create a WCF service
that uses trackable entities. At this time only C# is supported
using Visual Studio 2012 or 2013.

NOTE: You can use the EF 6.x Tools for Visual Studio to reverse
engineer both client and service trackable entities:
http://www.microsoft.com/en-us/download/confirmation.aspx?id=40762.
Add an "ADO.NET Entity Data Model" and select "Code First from Database."
However, the EF 6.x Tools are not compatible with the Client.Entities
project, which is a Portable Class Library. Either add client entities
to a .NET 4.5 Class Library and copy or link them to  the Client.Entities
project, or use the Entity Framework Power Tools to generate client entities:
http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d.

You can also generate client and service trackable entities using a Model-
First approach, by adding an ADO.NET Entity Data Model and selecting
"EF Designer from Database." Then right-click the model design surface,
select "Add Code Generation Item," and choose either a Client or Service
Trackable Entities EF 6.x Model First Generator, entering the same name
as the existing model and responding "Yes" to the prompts to replace
existing .tt files.

These steps use a scaled down version of the Northwind database, which you 
can get here: http://bit.ly/northwindslim.

Before starting the client Console app, build the solution, then right-click 
on the Web Api project and select View in Browser. This will start the service 
using the IIS Express web server.

To replicate this sample follow these steps:

1. Start by adding a new Trackable WCF project.
   - Click on the Trackable category under Visual C#
   - Select the Trackable WCF template
	 > For the project name, enter the solution name
   - These projects will be added: Client.ConsoleApp, Client.Entities,
     Service.Entities, Service.Core, Service.Web

2. Reverse engineer a database for the Service.Entities project
   - Right-click on the project, select Entity Framework,
	 Reverse Engineer Code First.
	 > Enter the connection information: server, database name
	 > For this sample we are using the NorthwindSlim database
   - Build the solution

3. Copy the connection string from App.config in Service.Entities
   - Paste it into the connectionStrings section of the web.config
	 file in the Service.Web project

4. Add services to the Service.Core.
   - Right-click on the project, select Add, New Item.
	 Then select the Trackable category and choose "Trackable WCF 
	 Service Type".
   - Modify the Get methods to include related entities. For example:
		IEnumerable<Order> orders = await db.Orders
			.Include(o => o.Customer)
			.Include("OrderDetails.Product")
			.Where(o => o.CustomerId == customerId)
			.ToListAsync();
   - Add code to the Create and Update methods for loading related entities:
		For example:
		ctx.LoadProperty(order, o => o.OrderDetails);
		foreach (var detail in order.OrderDetails)
			ctx.LoadProperty(detail, od => od.Product);
   - Add code to the Delete method to include order details:
		For example:
		Order order = db.Orders
			.Include(o => o.OrderDetails)
			.SingleOrDefaultAsync(o => o.OrderId == id);
   
5. Copy the service contract interfaces to the WCF client project.
   - Only copy the interfaces, not the service type implementations.
   - Optionally, you can append the Async suffix to each method
	 name and specify a Name parameter on the ServiceOperation
	 contract that matches the service operation method names.

6. Open app.config in the Console client project and insert
   endpoints.
   - Make sure the port number matches the service port number.

7. Write code in the Console client to create a ChannelFactory,
   passing the endpoint name from app.config. Call CreateChannel
   to create the client proxy.  Then invoke operations on the
   proxy, passing required parameters.
   - Because there are separate entities for client and service,
     it is not possible to add a "Service Reference" to the client.
	 You will need to use a ChannelFactory instead.

