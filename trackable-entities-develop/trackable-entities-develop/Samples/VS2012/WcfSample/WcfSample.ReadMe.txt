WCF Sample ReadMe

This sample demonstrates how to create a WCF service
that uses trackable entities. At this time only C# is supported
using Visual Studio 2012 or 2013.

NOTE: You should first install the Entity Framework Power Tools.
Support for EF 6.1 Tools for Visual Studio has also be added,
so that you can add an "ADO.NET Entity Data Model" to the
Service.Entities project. However, because the EF Power Tools
are not compatible with Portable Class Libraries, you can either
use the EF Power Tools to generate client entities, or copy
the Code Tempaltes folder to a .NET 4.5 Class Library project
and generate model classes there, then copy or link them to the
Client.Entities project.

By default LocalDb is used and the NorthwindSlim database is
created and seeded with a small amount of data when you first
run the WebApi service. Optionally, you can use SQL Express (or
another edition), create NorthwindSlim manually and run the
SQL script in the Data folder to create and populate the tables.

To replicate this sample follow these steps:

1. Start by adding a new Trackable WCF project.
   - Click on the Trackable category under Visual C#
   - Select the Trackable WCF template
     > For the project name, enter the solution name
   - These projects will be added: Client.ConsoleApp, Client.Entities,
     Service.Entities, Service.Core, Service.Web

2. Reverse engineer a database for the Service.Entities project
   - Right-click on the project, select Entity Framework,
     Reverse Engineer Code First.
	 > Enter the connection information: server, database name
	 > For this sample we are using the NorthwindSlim database
   - Build the solution

3. Copy the connection string from App.config in Service.Entities
   - Paste it into the connectionStrings section of the web.config
     file in the Service.Web project

4. Add a WCF service contract and type to the Service.Core project.
   - Right-click on the project, select Add, New Item.
     Then select the Trackable category and choose "Trackable WCF 
     Service Type".
   - Modify the Get methods to include related entities. For example:
        IEnumerable<Order> orders = await db.Orders
		    .Include(o => o.Customer)
            .Include("OrderDetails.Product")
            .Where(o => o.CustomerId == customerId)
            .ToListAsync();
   - Add code to the Create and Update methods for loading related entities:
        For example:
        ctx.LoadProperty(order, o => o.OrderDetails);
        foreach (var detail in order.OrderDetails)
            ctx.LoadProperty(detail, od => od.Product);
   - Add code to the Delete method to include order details:
        For example:
        Order order = db.Orders
			.Include(o => o.OrderDetails)
			.SingleOrDefaultAsync(o => o.OrderId == id);
   
5. Copy the service contract interfaces to the WCF client project.
   - Only copy the interfaces, not the service type implementations.
   - Optionally, you can append the Async suffix to each method
     name and specify a Name parameter on the ServiceOperation
	 contract that matches the service operation method names.

6. Open app.config in the Console client project and insert
   endpoints.
   - Make sure the port number matches the service port number.

7. Write code in the Console client to create a ChannelFactory,
   passing the endpoint name from app.config. Call CreateChannel
   to create the client proxy.  Then invoke operations on the
   proxy, passing required parameters.
   - Because there are separate entities for client and service,
     it is not possible to add a "Service Reference" to the client.
	 You will need to use a ChannelFactory instead.

