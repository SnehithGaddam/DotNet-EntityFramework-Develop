Web API Sample ReadMe

This sample demonstrates how to create an ASP.NET Web API service
that uses trackable entities. At this time only C# is supported
using Visual Studio 2012 or 2013.

NOTE: You should first install the Entity Framework Power Tools.
Support for EF 6.1 Tools for Visual Studio has also be added,
so that you can add an "ADO.NET Entity Data Model" to the
entities project.  This sample uses a shared entities .NET 4.5
class library project, which has both TrackableEntities.EF.6 and
TrackableEntities.Client packages installed and uses the client 
entities T4 templates.

These steps use a scaled down version of the Northwind database, 
which you can get here: http://bit.ly/northwindslim.

By default LocalDb is used and the NorthwindSlim databased is
created and seeded with a small amount of data when you first
run the WebApi service. Optionally, you can use SQL Express (or
another edition), create NorthwindSlim manually and run the
SQL script in the Data folder to create and populate the tables.

Before starting the client Console app, build the solution, then
right-click on the Web Api project and select View in Browser.
This will start the service using the development web server.

To replicate this sample follow these steps:

1. Start by adding a new Trackable Web Api project.
   - Click on the Trackable category under Visual C#
   - Select the Trackable Web Api template
     > For the project name, enter the solution name
   - Two projects will be added:
     WebApi, Service.Entities

2. Reverse engineer a database for the Service.Entities project
   - Right-click on the project, select Entity Framework,
     Reverse Engineer Code First.
	 > Enter the connection information: server, database name
	 > For this sample we are using the NorthwindSlim database
   - Build the solution

3. Copy the connection string from App.config in Service.Entities
   - Past it into the connectionStrings section of the web.config
     file in the Service.WebApi project

4. Add a new Web API controller using Entity Framework
   - Right-click the Controllers folder in the Web Api project
     and select Add New Item, then choose "Entity Web API Controller".
   - Enter Orders for the contoller name
     > For Model class: select the Order class
     > For Data context class: select NorthwindSlimContext
   - The code-generated API controller class is only slightly different
     than the standard version.
	 > Post, Put and Delete actions call _dbContext.ApplyChanges, which applies
	   entity state from trackable entities in the Order's object graph. The updated 
	   entity is returned so as to include database-generated values, such as
	   identity or concurrency fields.
     > The Delete action can include a TODO item for inserting one or more Include
	   statements to retrieve child entities.
	 > If the entity has a concurrency field, you should pass it into the Delete
	   action to support concurency checks.
   - Modify the GetOrders method to include related OrderDetails and Products:
        IEnumerable<Order> orders = await _dbContext.Orders.Include(o => o.Customer)
            .Include("OrderDetails.Product")
            .Where(o => o.CustomerId == customerId)
            .ToListAsync();
	 > A string is passed to Include to bring in products for each order detail.
     > Do the same for the GetOrder method:
        Order order = await _dbContext.Orders.Include(o => o.Customer)
            .Include("OrderDetails.Product")
            .SingleOrDefaultAsync(o => o.OrderId == id);
   - Add a GetOrders method that accepts a customerId:
		// GET api/Orders?customerId=ABCD
		public async Task<IEnumerable<Order>> GetOrders(string customerId)
		{
			IEnumerable<Order> orders = await _dbContext.Orders.Include(o => o.Customer)
				.Include("OrderDetails.Product")
				.Where(o => o.CustomerId == customerId)
				.ToListAsync();
			return orders;
		}

5. Run the Web Api project to test the controller
    - Click the API link on the home page
	- Select an operation, such as GetOrders or GetOrder
	- Click the Test API button, fill out the form and click Send
	  > You should see Json for the response body

6. Reverse engineer trackable entities for Client.Entities project
   - Right-click, Entity Framework, Reverse Engineer Code First
	 > Enter the connection information: server, database name
	 > For this sample we are using the NorthwindSlim database
   - Delete the Mapping folder
   - Delete the data context class: NorthwindSlimContext
   - Build the solution

7. Lastly, flesh out code in the Client.ConsoleApp project to invoke
   controller actions for the Web API service.
