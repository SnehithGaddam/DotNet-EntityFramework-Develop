//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiSample.Client.Entities.Temp
{
    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class Customer : EntityBase
    {
        public Customer()
        {
            this.Orders = new ChangeTrackingCollection<Order>();
            this.Location = new Location();
        }
        
    	public string CustomerId
    	{ 
    		get { return _CustomerId; }
    		set
    		{
    			if (Equals(value, _CustomerId)) return;
    			_CustomerId = value;
    			NotifyPropertyChanged(() => CustomerId);
    		}
    	}
    	private string _CustomerId;
        
    	public string CompanyName
    	{ 
    		get { return _CompanyName; }
    		set
    		{
    			if (Equals(value, _CompanyName)) return;
    			_CompanyName = value;
    			NotifyPropertyChanged(() => CompanyName);
    		}
    	}
    	private string _CompanyName;
        
    	public string ContactName
    	{ 
    		get { return _ContactName; }
    		set
    		{
    			if (Equals(value, _ContactName)) return;
    			_ContactName = value;
    			NotifyPropertyChanged(() => ContactName);
    		}
    	}
    	private string _ContactName;
    
    
    	public Location Location
    	{ 
    		get { return _Location; }
    		set
    		{
    			if (Equals(value, _Location)) return;
    			_Location = value;
    			NotifyPropertyChanged(() => Location);
    		}
    	}
    	private Location _Location;
    
    	public CustomerSetting CustomerSetting
    	{
    		get { return _CustomerSetting; }
    		set
    		{
    			if (Equals(value, _CustomerSetting)) return;
    			_CustomerSetting = value;
    			CustomerSettingChangeTracker = _CustomerSetting == null ? null
    				: new ChangeTrackingCollection<CustomerSetting> { _CustomerSetting };
    			NotifyPropertyChanged(() => CustomerSetting);
    		}
    	}
    	private CustomerSetting _CustomerSetting;
    	private ChangeTrackingCollection<CustomerSetting> CustomerSettingChangeTracker { get; set; }
    
    	public ChangeTrackingCollection<Order> Orders
    	{
    		get { return _Orders; }
    		set
    		{
    			if (Equals(value, _Orders)) return;
    			_Orders = value;
    			NotifyPropertyChanged(() => Orders);
    		}
    	}
    	private ChangeTrackingCollection<Order> _Orders;
    }
}
